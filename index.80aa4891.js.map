{"mappings":"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","sources":["src/JS/modal.js","src/JS/movie-template.js","src/JS/movies-container.js","src/JS/pagination.js","src/JS/movie-search.js","src/JS/video.js"],"sourcesContent":["\nconst url =\n  'https://api.themoviedb.org/3/trending/all/week?api_key=28f50cf3f177782503c21b43af04c7bc';\n\nconst close = document.querySelector('.close_modal_window');\nconst modal = document.querySelector('.modal_window');\nconst main = document.querySelector('main');\nconst movieTemplate = document.querySelector('.movie__template');\n\nconst innerModal = document.querySelector('.modal_inner');\n\n\nconsole.log(main);\n\nclose.addEventListener('click', () => {\n  modal.style.display = 'none';\n});\n\nmain.addEventListener('click', onShowModal);\n\nasync function onShowModal(e) {\n\n  if (!e.target.classList.contains('movie__image')) {\n    return;\n  } else {\n    \n    modal.classList.remove('is-hidden');\n    const selectedMovieId = e.target.id;\n    getMovie(selectedMovieId);\n  }\n}\n\n\nasync function getMovie(movieId) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=28f50cf3f177782503c21b43af04c7bc`,\n    );\n\n\n    const movieInformation = await response.json();\n    console.log(movieInformation);\n    getMovieAndUpdateUI(movieInformation);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieAndUpdateUI(movie) {\n  try {\n\n    const { desktop, tablet, mobile } = `https://image.tmdb.org/t/p/original${movie.poster_path}`;\n    const modalMarkup = `\n      <div class=\"modalMarkup trailer__picture\">\n         <picture>\n            <source src= ${desktop} media=\"(min-width: 1200px)\">\n            <source src= ${tablet} media=\"(min-width: 768px)\">\n            <source src= ${mobile} media=\"(min-width: 320px)\">\n            <img src= https://image.tmdb.org/t/p/original${movie.poster_path} alt=${\n      movie.title\n    } class=\"modal__img\">\n        </picture>\n      </div>\n      <div class=\"modal__content-movie\">\n\n        <p class=\"modal__title\">${movie.title}</p>\n        <div class=\"modal__box\">\n          <div class=\"film-features\">\n            <p class=\"film-features__text\">Vote / Votes</p>\n            <p class=\"film-features__text\">Popularity</p>\n            <p class=\"film-features__text\">Original Title</p>\n            <p class=\"film-features__text\">Genre</p>\n          </div>\n          <div class=\"film-values\">\n            <p class=\"film-values__text\">\n              <span class=\"film-values__vote film-values__vote--color\">${movie.vote_average}</span>\n              <span class=\"film-values__slash\">/</span>\n              <span class=\"film-values__vote film-values__votes--color\">${movie.vote_count}</span>\n\n            </p>\n            <p class=\"film-values__text\">\n              <span class=\"film-value__vote\">${movie.popularity.toFixed(1)}</span>\n            </p>\n            <p class=\"film-values__text\">\n\n              <span class=\"film-values__vote\">${movie.original_title}</span>\n            </p>\n            <p class=\"film-values__text\">\n              <span class=\"film-values__vote\">${movie.genres[0].name}</span>\n\n            </p>\n          </div>\n        </div>\n        <div class=\"modal__description\">\n          <p class=\"modal__about\">About</p>\n\n          <p class=\"modal__text\">${movie.overview}</p>\n\n        </div>\n        <div class=\"modal__btn-box\" data-id=\"${movie.id}\">\n          <button class=\"modal__btn modal__btn--watched\" type=\"button\">Add to watched</button>\n          <button class=\"modal__btn modal__btn--queue\" type=\"button\">Add to queue</button>\n        </div>\n      </div>`;\n\n\n    innerModal.insertAdjacentHTML('beforeend', modalMarkup);\n\n  } catch (e) {\n    console.log(e);\n  }\n}\n","const main = document.querySelector('main');\n\n//TWORZENIE SZABLONU FILMU NA STRONĘ GŁÓWNĄ\nconst createMainMovieTemplateHTML = (image, id, title, genres, year) => {\n  const twoGenres = genres.slice(0, 2).join(', ');\n  return `<li class=\"movie__template\">\n    <img class=\"movie__image\" id=\"${id}\" src=\"${image}\" alt='${title}' width=\"280px\" height=\"398px\"/> \n    <h5 class=\"movie__title\">${title}</h5>\n    <div class=\"movie__informations\"><span>${twoGenres}</span> | <span>${year}</span></div>\n  </li>`;\n};\n\nconst createMainMovieTemplate = async movies => {\n  const moviesList = await Promise.all(\n    movies.map(async movie => {\n      const image = `https://image.tmdb.org/t/p/original${movie.poster_path}`;\n      const id = movie.id;\n      const title = movie.title ? movie.title : movie.name;\n      const movieDate = movie.release_date ? movie.release_date : movie.first_air_date;\n      const year = new Date(movieDate).getFullYear();\n      const arrayOfGenresIds = movie.genre_ids;\n      const genres = await getGenresData(arrayOfGenresIds);\n      return createMainMovieTemplateHTML(image, id, title, genres, year);\n    }),\n  );\n  main.innerHTML = moviesList.join('');\n};\n\n//TWORZENIE SZABLONU FILMU DLA MY LIBRARY\n\n// const createLibraryMovieTemplateHTML = (image, id, title, genres, year, rating) => {\n//   const twoGenres = genres.slice(0, 2).join(', ');\n//   return `<li class=\"movie__template\">\n//     <img class=\"movie__image\" id=\"${id}\" src=\"${image}\" alt='${title}' width=\"280px\" height=\"398px\"/>\n//     <h5 class=\"movie__title\">${title}</h5>\n//     <div class=\"movie__informations\"><span>${twoGenres}</span> | <span>${year}</span>\n//     <span class=\"movie__rating\">${rating}</span></div>\n//   </li>`;\n// };\n\n// const createLibraryMovieTemplate = async movies => {\n//   const moviesList = await Promise.all(\n//     movies.map(async movie => {\n//       const image = `https://image.tmdb.org/t/p/original${movie.poster_path}`;\n//       const id = movie.id;\n//       const title = movie.title ? movie.title : movie.name;\n//       const movieDate = movie.release_date ? movie.release_date : movie.first_air_date;\n//       const year = new Date(movieDate).getFullYear();\n//       const rating = movie.vote_average.toFixed(1);\n//       const arrayOfGenresIds = movie.genre_ids;\n//       const genres = await getGenresData(arrayOfGenresIds);\n//       return createLibraryMovieTemplateHTML(image, id, title, genres, year, rating);\n//     }),\n//   );\n//   main.innerHTML = moviesList.join('');\n// };\n\n//SZUKANIE nazwy gatunku filmu po jego ID\nconst searchIdForName = (data, arrayOfIds) => {\n  const names = data\n    .filter(d => arrayOfIds.includes(d.id))\n    .map(d => {\n      return d.name;\n    });\n  return names;\n};\n\n//FETCH listy gatunków filmów (id, name)\nconst getGenresData = async arrayOfIds => {\n  try {\n    const response = await fetch(\n      'https://api.themoviedb.org/3/genre/movie/list?api_key=28f50cf3f177782503c21b43af04c7bc',\n    );\n    const data = await response.json();\n    const genresData = await data.genres;\n    if (arrayOfIds) {\n      const names = searchIdForName(genresData, arrayOfIds);\n      return names;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//FETCH najpopularniejszych na dziś filmów\nconst url =\n  'https://api.themoviedb.org/3/trending/all/day?api_key=28f50cf3f177782503c21b43af04c7bc';\n\nconst getPopularMoviesData = async () => {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const popularMovies = await data.results;\n    createMainMovieTemplate(popularMovies);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\ngetPopularMoviesData();\n","const mainElement = document.querySelector('main');\nmainElement.classList.add('movies-container');","// import Pagination from 'tui-pagination';\n\nconst options = {\n  totalItems: 200,\n  itemsPerPage: 20,\n  visiblePages: 5,\n  page: 1,\n  centerAlign: true,\n  template: {\n    page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n    currentPage: '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n    moveButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</a>',\n    disabledMoveButton:\n      '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</span>',\n    moreButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' + '<span>⋅⋅⋅</span>' + '</a>',\n  },\n};\n\nexport const pagination = new Pagination('pagination', options);\n\nexport default pagination;\n","import { createMainMovieTemplate, createMainMovieTemplateHTML } from './movie-template';\n\nconst searchMoviesForm = document.querySelector('#form');\nconst searchMovieInput = document.querySelector('#topSearch');\nconst main = document.querySelector('main');\n\nconst SEARCH_API =\n  'https://api.themoviedb.org/3/search/movie?&api_key=28f50cf3f177782503c21b43af04c7bc&query=';\n\n// const getResults = async query => {\n//   const API_KEY = '28f50cf3f177782503c21b43af04c7bc';\n//   try {\n//     const request = await axios.get(\n//       `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`,\n//     );\n//     return request.data;\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n// const showMovies = movie => {\n//   movie.forEach(movie => {\n//     const { image, id, title, genres, year } = movie;\n\n//     const movieElement = document.createElement('div');\n\n//     movieElement.innerHTML = `<li class=\"movie__template\">\n//     <img class=\"movie__image\" id=\"${id}\" src=\"${image}\" alt='${title}' width=\"280px\" height=\"398px\"/>\n//     <h5 class=\"movie__title\">${title}</h5>\n//     <div class=\"movie__informations\"><span></span> | <span>${year}</span></div>\n//   </li>`;\n//   });\n// };\n\nconst getResults = async url => {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);\n    searchedMovies = await data.results;\n    main.innerHTML = '';\n    // createMainMovieTemplateHTML(searchedMovies);\n  } catch (error) {\n    console.log(error);\n  }\n};\nsearchMoviesForm.addEventListener('submit', e => {\n  e.preventDefault();\n  const query = searchMovieInput.value;\n  if (query) {\n    getResults(SEARCH_API + query);\n    searchMovieInput.value = '';\n  }\n});\n","const movieId = 640146;\n\nconst innerModal = document.querySelector('.modal_inner');\nconst modalVideo = document.querySelector('.video_modal');\n\n//video iframe\nconst showVideoHTML = videoKey => {\n  const iframe = `<iframe class=\"video_iframe\"\n    width=\"600\" height=\"337\"\n    src=\"https://www.youtube.com/embed/${videoKey}\"\n    title=\"YouTube video player\"\n    frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n    allowfullscreen>\n    </iframe>`;\n  modalVideo.innerHTML = iframe;\n};\n\n//Szukanie klucza video\nconst findVideoKey = videos => {\n  const video = videos.find(v => v.type === 'Trailer');\n  const videoKey = video.key;\n  showVideoHTML(videoKey);\n};\n\n//FETCH video zwiastunu po id filmu\nconst getMovieVideos = async movieId => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=28f50cf3f177782503c21b43af04c7bc`,\n    );\n    const data = await response.json();\n    const movieVideos = await data.results;\n    findVideoKey(movieVideos);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Otwieranie video\nconst openMovieVideo = e => {\n  if (!e.target.classList.contains('modal__img')) {\n    return;\n  } else {\n    modalVideo.classList.remove('video_modal-hidden');\n    //pobranie id z modal__img\n    //   const selectedMovieId = e.target.id;\n    getMovieVideos(movieId);\n  }\n};\n\n//Zamykanie video\nconst closeMovieVideo = e => {\n  if (e.target.classList.contains('video_iframe')) {\n    return;\n  } else {\n    modalVideo.classList.add('video_modal-hidden');\n    modalVideo.innerHTML = '';\n  }\n};\n\nmodalVideo.addEventListener('click', closeMovieVideo);\ninnerModal.addEventListener('click', openMovieVideo, { passive: true });\n"],"names":["$52c9fbd2920a6736$var$close","document","querySelector","$52c9fbd2920a6736$var$modal","$52c9fbd2920a6736$var$main","$52c9fbd2920a6736$var$innerModal","console","log","addEventListener","style","display","async","e","target","classList","contains","remove","movieId","response","fetch","movieInformation","json","movie","desktop","tablet","mobile","poster_path","modalMarkup","title","vote_average","vote_count","popularity","toFixed","original_title","genres","name","overview","id","insertAdjacentHTML","$52c9fbd2920a6736$var$getMovieAndUpdateUI","error","$52c9fbd2920a6736$var$getMovie","$0324c45f15d03b16$var$main","$0324c45f15d03b16$var$getGenresData","arrayOfIds","data","genresData","names","filter","d","includes","map","$0324c45f15d03b16$var$searchIdForName","movies","moviesList","Promise","all","image","movieDate","release_date","first_air_date","year","Date","getFullYear","arrayOfGenresIds","genre_ids","slice","join","$0324c45f15d03b16$var$createMainMovieTemplateHTML","innerHTML","$0324c45f15d03b16$var$createMainMovieTemplate","results","$0324c45f15d03b16$var$getPopularMoviesData","add","Pagination","totalItems","itemsPerPage","visiblePages","page","centerAlign","template","currentPage","moveButton","disabledMoveButton","moreButton","$3370d2e3475999e9$var$searchMoviesForm","$3370d2e3475999e9$var$searchMovieInput","$3370d2e3475999e9$var$main","preventDefault","query","value","url","searchedMovies","$3370d2e3475999e9$var$getResults","$6294af3c9ac72ecd$var$innerModal","$6294af3c9ac72ecd$var$modalVideo","$6294af3c9ac72ecd$var$findVideoKey","videos","videoKey","iframe","$6294af3c9ac72ecd$var$showVideoHTML","find","v","type","key","movieVideos","$6294af3c9ac72ecd$var$getMovieVideos","passive"],"version":3,"file":"index.80aa4891.js.map"}